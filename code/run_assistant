#!/usr/local/bin/node

/*
 * Creates and runs a ChatGPT assistant designed to query NOTAMs
 * 
 * Usage: ./run_assistant [-s]
 * 
 * Options:
 * 
 * -s Segregate airports, ie analyze them one by one. 
 *
 * Copyright (c) 2024 Frey Mansikkaniemi
 */

const fs = require('fs');
const readline = require('readline')
const path = require('path');
const openailib = require('openai');
const { throws } = require('assert');
const { exit } = require('process');
const { Console } = require('console');
const openai = new openailib.OpenAI()
const dataDirPath = "../data"
const assistantName = "NOTAM Assistant"
const vectorStoreName = "NOTAM Store"
//const llmModel = "gpt-3.5-turbo"
//const llmModel = "gpt-4-turbo-preview"
const llmModel = "gpt-4-turbo"

async function createAssistant(name,instructions,segregated) {
    try {
        const tools = segregated ? [] : [{ type: "file_search" }]
        const assistant = await openai.beta.assistants.create({
            name: name,
            instructions: instructions,
            tools: tools,
            model: llmModel,
            temperature: 0.1,
        });
        return assistant;
    } catch (error) {
        console.error(`Error creating assistant: ${error.message}`);
    }
}

async function getAssistant(name) {
    const myAssistants = await openai.beta.assistants.list({
        order: "desc",
        limit: "20",
    });

    const theAssistant = myAssistants.data.filter(a => a.name === name)

    if (theAssistant.length === 1) {
        return theAssistant[0];
    } else {
        return null;
    }

}

async function getVectorStore() {
    const stores = await openai.beta.vectorStores.list();
    const theStore = stores.data.filter(s => s.name === vectorStoreName)

    if (theStore.length === 1) {
        return theStore[0];
    } else {
        return null;
    }
}

async function uploadAssistantFiles(files) {
    const fileIds = []

    for (let index = 0; index < files.length; index++) {
        const file = files[index];
        const fileId = await openai.files.create({
            file: fs.createReadStream(file),
            purpose: "assistants",
        });
        fileIds.push(fileId.id)
        console.log("Uploaded: " + fileId.id)

    }
    return fileIds;
}

async function createVectorStore(files) {
    const fileIds = await uploadAssistantFiles(files)

    // Create a vector store including our files.
    let vectorStore = await openai.beta.vectorStores.create({
        name: vectorStoreName,
        file_ids: fileIds,
    });

    return vectorStore;
}

function readFileIntoString(filePath) {
    try {
        const data = fs.readFileSync(filePath, 'utf8');
        return data;
    } catch (error) {
        console.error(`Got an error trying to read the file: ${error.message}`);
    }
}

function writeLineToFile(filePath, line) {
    try {
        fs.appendFileSync(filePath, line + '\n')
    } catch (error) {
        console.error(`Failed to write to the file: ${error.message}`);
    }
}

function createFile(filePath) {
    try {
        fs.writeFileSync(filePath, "")
    } catch (error) {
        console.error(`Failed to write to the file: ${error.message}`);
    }
}

function getNotamFileNames(directory) {
    const fileIds = []

    try {
        const files = fs.readdirSync(directory)

        files.forEach(file => {
            if (path.extname(file) === '.json') {
                const absolutePath = path.resolve(directory, file);
                fileIds.push(absolutePath)
            }
        });

        return fileIds;
    } catch (error) {
        console.error(`Got an error trying to read the directory: ${error.message}`);
    }
}

async function readLinesIntoArray(filePath) {
    const fileStream = fs.createReadStream(filePath);
    const rl = readline.createInterface({
        input: fileStream,
        crlfDelay: Infinity
    });

    const lines = [];

    for await (const line of rl) {
        lines.push(line);
    }

    return lines;
}

function extractICAOIdent(inputString) {
    // Define the regex pattern
    const pattern = / - ([A-Z]{4})/;

    // Use match() to search for the pattern in the input string
    const matches = inputString.match(pattern);

    // Check if the pattern was found
    if (matches && matches.length > 1) {
        // Return the part of the string that matches the pattern inside the parentheses
        return matches[1];
    } else {
        // Return null if the pattern was not found
        return "";
    }
}

function extractNOTAMIdents(text) {
    // Define the regex pattern to match the specified format globally
    const pattern = /[A-Z]\d{2,4}\/\d{2}/g;

    // Search for all matches of the pattern in the text
    const matches = text.match(pattern);

    // Return the matches or indicate no matches were found
    return [...new Set(matches)] || [];
}

async function getQuestions() {
    const lines = await readLinesIntoArray(`${dataDirPath}/questions.txt`)
    return lines;
}

async function getAirports() {
    const lines = await readLinesIntoArray(`${dataDirPath}/airport_list.txt`)
    return lines.map(extractICAOIdent)
}

async function askQuestion(questionText, thread) {
    const message = await openai.beta.threads.messages.create(
        thread.id, {
            role: "user",
            content: "YOUR TASK: " + questionText
        }
    );
    return message;
}

async function getAnswerFromAssistant(assistant, thread) {
    let run = await openai.beta.threads.runs.create(
        thread.id, {
            assistant_id: assistant.id
        }
    );

    while (['queued', 'in_progress', 'cancelling'].includes(run.status)) {
        await new Promise(resolve => setTimeout(resolve, 1000)); // Wait for 1 second
        run = await openai.beta.threads.runs.retrieve(
            run.thread_id,
            run.id
        );
    }

    if (run.status === 'completed') {
        const created_messages = await openai.beta.threads.messages.list(
            run.thread_id
        );
        let messageText = null
        for (const message of created_messages.data.reverse()) {
            //console.log(`${message.role} > ${message.content[0].text.value}`);
            if (message.role == 'assistant') {
                messageText = message.content[0].text.value;
            }
        }
        return messageText;
    } else {
        throw new Error(`Error running thread: ${run.status}`)
    }
}

// Function to parse command line arguments for the -s option
function segregationSelected() {
    const oIndex = process.argv.indexOf('-s');
    if (oIndex !== -1 ) {
        return true;
    }
    return false; // Default if -s is not provided or has no value
}

// Function to read all JSON files and combine their data into one array
function combineJSONFiles(dirPath) {
    try {
        const files = fs.readdirSync(dirPath)
        let combinedData = [];

        files.forEach(file => {
            if (path.extname(file) === '.json') {
                try {
                    const data = fs.readFileSync(`${dirPath}/${file}`);
                    const json = JSON.parse(data);
                    combinedData = combinedData.concat(json);
                } catch (error) {
                    console.error(`Error reading or parsing ${file}:`, error);
                    exit(1)
                }
            }
        });

        console.log(`Combined JSON data ${combinedData.length}`);
        
        return combinedData;
    } catch (error) {
        console.error('Error reading directory:', error);
        exit(1);
    }
}

function loadNOTAMS(dirPath){
    const notams = combineJSONFiles(dirPath)
    console.log("Loaded NOTAMs into array, found " + notams.length)
    return notams;
}

function notamsForAirport(icaoIdent,allNotams){
    console.log(`Finding NOTAMs for ${icaoIdent}`);
    const notams = allNotams.filter( n => n.location === icaoIdent); 
    return notams;
}

async function main() {
    const runSegregated = segregationSelected()

    if(runSegregated){
        console.log("Running in segregated airports mode.")
    }

    let allNotams = runSegregated ? loadNOTAMS(dataDirPath) : []
    const promptMainBody = readFileIntoString(`${dataDirPath}/prompt.txt`);
    const prompt = runSegregated ? 
        promptMainBody + "\n\n The provided files lists all valid NOTAMs. Only refer to this list; do NOT USE any other NOTAMs you may have knowledge of." :
        "\n\n Use the list of NOTAMs provided by the user. Only refer to this list; do NOT USE any other NOTAMs you may have knowledge of."
    console.log("Found prompt")

    
    const assistantNamePrecise = runSegregated ? `${assistantName} Airport by Airport` : assistantName
    let assistant = await getAssistant(assistantNamePrecise)

    if (assistant === null) {
        const notams = getNotamFileNames(dataDirPath)
        console.log("Found " + notams.length + " NOTAM files")
        assistant = await createAssistant(assistantNamePrecise, prompt,runSegregated)
        console.log("Assistant created, id: " + assistant.id)

        if(!runSegregated){
            let vectorStore = await getVectorStore()
            if (vectorStore === null) {
                vectorStore = await createVectorStore(notams)
                console.log("Vector Store created, id: ", vectorStore.id)
            } else {
                console.log("Using existing vector store id: " + vectorStore.id)
            }

            await openai.beta.assistants.update(assistant.id, {
                tool_resources: { file_search: { vector_store_ids: [vectorStore.id] } },
            });
            console.log("Updated assistant.")
        }
    } else {
        console.log("Using existing assistant id: " + assistant.id)
    }

    const airports = ['RJTT']//await getAirports()
    console.log("Found airports", airports)
    const questions = await getQuestions()
    console.log("Found questions", questions)
    const now = new Date()
    const outfile = dataDirPath + "/answers-run-" + now.toISOString().replaceAll(':', '').replaceAll('-', '') + ".md"
    const outfileCsv = dataDirPath + "/answers-run-" + now.toISOString().replaceAll(':', '').replaceAll('-', '') + ".csv"
    createFile(outfile)
    createFile(outfileCsv)

    for (let index_a = 0; index_a < airports.length; index_a++) {
        const airport = airports[index_a];
        const airportNotamList = notamsForAirport(airport,allNotams)
        //const thread = await openai.beta.threads.create();
        console.log("-------------------------------------------");
        writeLineToFile(outfile, "\n---\n")
        console.log(`Airport: ${airport}`)
        writeLineToFile(outfile, `# Airport: ${airport}`)

        let retrycount = 0;
        for (let index_q = 0; index_q < questions.length; index_q++) {
            const thread = await openai.beta.threads.create();
            const question = runSegregated ? 
                `${questions[index_q]}
                List of all NOTAMs applicable to ${airport}:
                
                ${JSON.stringify(airportNotamList)}
                ` 
                : questions[index_q];
            
            if (retrycount > 0) {
                console.log("Retrying question " + index_q)
            }
            writeLineToFile(outfile, "")
                //console.log(`Q${index+1}: ${question}`)
            await askQuestion(question.replace('XXXX', airport), thread);
            const answer = await getAnswerFromAssistant(assistant, thread);
            if (answer === null && retrycount < 10) {
                retrycount += 1;
                index_q -= 1;
            } else {
                console.log(`##A${index_q+1}`)
                    //console.log(`${answer}`)
                const notamIdents = extractNOTAMIdents(answer)
                writeLineToFile(outfile, `## A${index_q+1}:`)
                writeLineToFile(outfile, `${answer}`)
                writeLineToFile(outfileCsv, `${airport},${index_q+1},${notamIdents.join(',')}`)
                retrycount = 0;
            }
        }

    }
    //const response = await openai.beta.assistants.del(assistant.id);
    //console.log("Assistant deleted.")
}

main();